/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this SecretBackendCert
func (mg *SecretBackendCert) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_cert"
}

// GetConnectionDetailsMapping for this SecretBackendCert
func (tr *SecretBackendCert) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"private_key": "status.atProvider.privateKey"}
}

// GetObservation of this SecretBackendCert
func (tr *SecretBackendCert) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendCert
func (tr *SecretBackendCert) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendCert
func (tr *SecretBackendCert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendCert
func (tr *SecretBackendCert) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendCert
func (tr *SecretBackendCert) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendCert
func (tr *SecretBackendCert) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendCert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendCert) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendCertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendCert) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendConfigCA
func (mg *SecretBackendConfigCA) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_config_ca"
}

// GetConnectionDetailsMapping for this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"pem_bundle": "spec.forProvider.pemBundleSecretRef"}
}

// GetObservation of this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendConfigCA
func (tr *SecretBackendConfigCA) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendConfigCA using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendConfigCA) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendConfigCAParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendConfigCA) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendConfigUrls
func (mg *SecretBackendConfigUrls) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_config_urls"
}

// GetConnectionDetailsMapping for this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendConfigUrls
func (tr *SecretBackendConfigUrls) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendConfigUrls using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendConfigUrls) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendConfigUrlsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendConfigUrls) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendCrlConfig
func (mg *SecretBackendCrlConfig) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_crl_config"
}

// GetConnectionDetailsMapping for this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendCrlConfig
func (tr *SecretBackendCrlConfig) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendCrlConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendCrlConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendCrlConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendCrlConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendIntermediateCertRequest
func (mg *SecretBackendIntermediateCertRequest) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_intermediate_cert_request"
}

// GetConnectionDetailsMapping for this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"private_key": "status.atProvider.privateKey"}
}

// GetObservation of this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendIntermediateCertRequest
func (tr *SecretBackendIntermediateCertRequest) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendIntermediateCertRequest using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendIntermediateCertRequest) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendIntermediateCertRequestParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendIntermediateCertRequest) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendIntermediateSetSigned
func (mg *SecretBackendIntermediateSetSigned) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_intermediate_set_signed"
}

// GetConnectionDetailsMapping for this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendIntermediateSetSigned
func (tr *SecretBackendIntermediateSetSigned) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendIntermediateSetSigned using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendIntermediateSetSigned) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendIntermediateSetSignedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendIntermediateSetSigned) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendRole
func (mg *SecretBackendRole) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_role"
}

// GetConnectionDetailsMapping for this SecretBackendRole
func (tr *SecretBackendRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendRole
func (tr *SecretBackendRole) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendRole
func (tr *SecretBackendRole) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendRole
func (tr *SecretBackendRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendRole
func (tr *SecretBackendRole) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendRole
func (tr *SecretBackendRole) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendRole
func (tr *SecretBackendRole) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendRole) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendRootCert
func (mg *SecretBackendRootCert) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_root_cert"
}

// GetConnectionDetailsMapping for this SecretBackendRootCert
func (tr *SecretBackendRootCert) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendRootCert
func (tr *SecretBackendRootCert) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendRootCert
func (tr *SecretBackendRootCert) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendRootCert
func (tr *SecretBackendRootCert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendRootCert
func (tr *SecretBackendRootCert) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendRootCert
func (tr *SecretBackendRootCert) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendRootCert
func (tr *SecretBackendRootCert) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendRootCert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendRootCert) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendRootCertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendRootCert) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendRootSignIntermediate
func (mg *SecretBackendRootSignIntermediate) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_root_sign_intermediate"
}

// GetConnectionDetailsMapping for this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendRootSignIntermediate
func (tr *SecretBackendRootSignIntermediate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendRootSignIntermediate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendRootSignIntermediate) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendRootSignIntermediateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendRootSignIntermediate) GetTerraformSchemaVersion() int {
	return 2
}

// GetTerraformResourceType returns Terraform resource type for this SecretBackendSign
func (mg *SecretBackendSign) GetTerraformResourceType() string {
	return "vault_pki_secret_backend_sign"
}

// GetConnectionDetailsMapping for this SecretBackendSign
func (tr *SecretBackendSign) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecretBackendSign
func (tr *SecretBackendSign) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretBackendSign
func (tr *SecretBackendSign) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretBackendSign
func (tr *SecretBackendSign) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretBackendSign
func (tr *SecretBackendSign) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretBackendSign
func (tr *SecretBackendSign) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretBackendSign
func (tr *SecretBackendSign) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretBackendSign using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretBackendSign) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretBackendSignParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretBackendSign) GetTerraformSchemaVersion() int {
	return 1
}
